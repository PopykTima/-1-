import logging
import random
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏
ANEKDOTS_FILE = "anekdots.txt"

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤
last_sent = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—É
def load_anekdots(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return [line.strip() for line in file.readlines() if line.strip()]
    except FileNotFoundError:
        logging.error("–§–∞–π–ª –∑ –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return ["–ê–Ω–µ–∫–¥–æ—Ç—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î üòî"]

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–Ω–µ–∫–¥–æ—Ç–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
anekdots = load_anekdots(ANEKDOTS_FILE)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="get_anekdot")],
        [InlineKeyboardButton("–Ø –Ω–µ —Ö–æ—á—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="dont_want_anekdot")],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {update.effective_user.first_name}! "
        f"–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup,
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É
def get_random_anekdot() -> str:
    return random.choice(anekdots)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∞–Ω–µ–∫–¥–æ—Ç
def can_receive_anekdot(user_id: int) -> bool:
    now = datetime.now()
    if user_id in last_sent:
        last_time = last_sent[user_id]
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –ø–æ—Ç–æ—á–Ω–æ—é
        return last_time.date() != now.date()
    return True

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É
async def send_anekdot(update: Update, context: CallbackContext, via_command=False) -> None:
    user_id = update.effective_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç —Å—å–æ–≥–æ–¥–Ω—ñ
    if can_receive_anekdot(user_id):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —ñ –∞–Ω–µ–∫–¥–æ—Ç
        last_sent[user_id] = datetime.now()

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∞–Ω–µ–∫–¥–æ—Ç
        anekdot = get_random_anekdot()
        if via_command:
            await update.message.reply_text(anekdot)
        else:
            await update.callback_query.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø—ñ–Ω–µ—Ä
            await update.callback_query.message.reply_text(anekdot)
    else:
        # –Ø–∫—â–æ –∞–Ω–µ–∫–¥–æ—Ç –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
        message = "–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç —Å—å–æ–≥–æ–¥–Ω—ñ! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ üòä"
        if via_command:
            await update.message.reply_text(message)
        else:
            await update.callback_query.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø—ñ–Ω–µ—Ä
            await update.callback_query.message.reply_text(message)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –Ω–µ —Ö–æ—á—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç"
async def dont_want_anekdot(update: Update, context: CallbackContext) -> None:
    await update.callback_query.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø—ñ–Ω–µ—Ä
    await update.callback_query.message.reply_text("–ù—É —Ç–æ –≤–∏—Ö–æ–¥—å –∑ –≤—ñ–¥—Ü–∏ –î–£–®–ù–Ü–õ–ê! üòå")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if query.data == "get_anekdot":
        await send_anekdot(update, context)
    elif query.data == "dont_want_anekdot":
        await dont_want_anekdot(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /anekdot
async def anekdot_command(update: Update, context: CallbackContext) -> None:
    await send_anekdot(update, context, via_command=True)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    # –í—Å—Ç–∞–≤—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
    TOKEN = "7798938615:AAFGExwsrhnYYj2VPyFjtlroFx8hJKZk5vQ"

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —ñ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("anekdot", anekdot_command))
    application.add_handler(CallbackQueryHandler(button_handler))  # –î–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–æ–∫

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
    
